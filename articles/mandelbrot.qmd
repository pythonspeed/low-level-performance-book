```{python}
#| echo: false
import sys
sys.path.append("../src")
%load_ext book_magics
```


```{python}
# Enable extra auto-vectorization:
import os
os.environ["NUMBA_SLP_VECTORIZE"] = "1"

import numpy as np
from numba import jit

def impl(height, width, x, y):
    c = x + y*1j
    fractal = np.full(c.shape, 20, dtype=np.int32)
    for h in range(height):
        for w in range(width):
            z = c[h, w]
            for i in range(20):
                z = z**2 + c[h, w]
                if z.real**2 + z.imag**2 > 4:   # <--- only difference from pure Python
                    fractal[h, w] = i
                    break
    return fractal

numba_impl = jit(impl)
numba_fastmath_impl = jit(fastmath=True)(impl)

def numba_mandelbrot(height, width):
    y, x = np.ogrid[-1:0:height*1j, -1.5:0:width*1j]
    return numba_impl(height, width, x, y)

def numba_fastmath_mandelbrot(height, width):
    y, x = np.ogrid[-1:0:height*1j, -1.5:0:width*1j]
    return numba_fastmath_impl(height, width, x, y)

result1 = numba_mandelbrot(200, 400)
_ = numba_fastmath_mandelbrot(200, 400)
```

```{python}
#| echo: false
%%compare_timing --measure=instructions
numba_mandelbrot(200, 400)
numba_fastmath_mandelbrot(200, 400)
```

```{python}
def batched_mandelbrot(height, width, x, y):
    assert width % 8 == 0
    c = x + y*1j
    fractal = np.zeros(c.shape, dtype=np.int32)
    current_rs = np.zeros((8,), dtype=np.float64)
    current_is = np.zeros((8,), dtype=np.float64)
    rrs = np.zeros((8,), dtype=np.float64)
    iis = np.zeros((8,), dtype=np.float64)
    start_rs = np.zeros((8,), dtype=np.float64)
    start_is = np.zeros((8,), dtype=np.float64)
    mask = np.zeros((8,), dtype=np.float64)
    for h in range(height):
        for w in range(width // 8):
            start = c[h, w * 8: (w + 1) * 8]
            for j in range(8):
                current_rs[j] = start[j].real
                current_is[j] = start[j].imag
                start_rs[j] = start[j].real
                start_is[j] = start[j].imag
            for j in range(8):
                mask[j] = False
            for _ in range(20):
                for j in range(8):
                    rrs[j] = current_rs[j] ** 2
                    iis[j] = current_is[j] ** 2
                for j in range(8):
                    mask[j] = 1.0 if (rrs[j] + iis[j]) > 4 else mask[j]
                if mask.sum() == 8:
                    break
                for j in range(8):
                    fractal[h, w * 8 + j] += 1 - mask[j]

                for j in range(8):
                    ri = current_rs[j] * current_is[j]
                    current_rs[j] = start_rs[j] + (rrs[j] - iis[j])
                    current_is[j] = start_is[j] + ri + ri

    return fractal

numba_batched_mandelbrot = jit(batched_mandelbrot)
numba_batched_fastmath = jit(fastmath=True)(batched_mandelbrot)

def numba_mandelbrot2(height, width):
    y, x = np.ogrid[-1:0:height*1j, -1.5:0:width*1j]
    return numba_batched_mandelbrot(height, width, x, y)

def numba_fastmath_mandelbrot2(height, width):
    y, x = np.ogrid[-1:0:height*1j, -1.5:0:width*1j]
    return numba_batched_fastmath(height, width, x, y)

result2 = numba_mandelbrot2(200, 400)
print(result1[0, :16])
print(result2[0, :16])
#assert np.array_equal(result1, result2)

_ = numba_fastmath_mandelbrot2(200, 400)
```

```{python}
#| echo: false
%%compare_timing --measure=instructions
numba_mandelbrot2(200, 400)
numba_fastmath_mandelbrot2(200, 400)
```
