# Take advantage of modern CPUs' in-core parallelism

Given the CPU is how our code runs, it's useful to understand how that CPU works.
Of course, modern CPUs have billions of transistors.
No human being, not even the chips' designers, can truly comprehend exactly how they work.
But to write fast software you don't need perfect understanding; instead, you need a sufficiently accurate mental model.

So far we've been working with an implicit, and highly simplified, mental model of CPUs.
To make it explicit, we assumed that:

1. A CPU core sequentially executes a series of instructions, one at a time.
   An instruction might add two numbers, or read a value from RAM.
2. Each instruction takes approximately the same amount of time to execute.

Neither of these assumptions is quite accurate:

1. CPU cores can run instructions in parallel, even in single-threaded code running on a single core.
2. Different instructions can take different amounts of time.

In the next few chapters we'll focus on the first part: parallelism and its consequences.
When we discuss reading memory we'll see how the same CPU instruction can take varying amounts of time.
