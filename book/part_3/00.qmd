# Take advantage of modern CPUs' in-core parallelism

So far we've been working with a simple mental model of CPUs where we assumed each core only executes one instruction at a time.
In fact, modern CPUs can actually run code in parallel within a single core, in two different ways:

* **Implicit, automatic parallelism:** Instruction-level parallelism allows the CPU to take pre-existing code and run parts of it in parallel.
  However, from the outside the CPU core will still appear _as if_ it were executing one instruction at a time.
* **Explicit, opt-in parallelism:** Single Instruction Multiple Data (SIMD) instructions are specialized CPU instructions the compiler emits that tells the CPU to run the same operation on a larger-than-usual amount of data.
  For example, instead of adding four pairs of 64-bit integers one by one, you can add together all four of them with a single SIMD instruction.
