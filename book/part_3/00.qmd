# A better mental model of CPU cores

The first thought you probably have when you see "parallelism" is using multiple threads or processes, in order to take advantage of multiple CPU cores.
But that's not what we're talking about in this section.
Rather, we're talking about the CPU's ability to implement parallelism within a single CPU core, in a single thread.
**Surprisingly, a single CPU core can run multiple instructions at once.**

Up until this point we haven't relied on this in our optimization efforts.
To make our mental model explicit, so far we've assumed that:

1. A CPU core sequentially executes a series of instructions, one at a time.
   An instruction might add two numbers, or read a value from RAM.
2. Each instruction takes approximately the same amount of time to execute.

Keep in mind that modern CPUs have billions of transistors.
No human being, not even the chips' designers, can truly comprehend exactly how they work.
But to write fast software you don't need perfect understanding; instead, you need a sufficiently accurate mental model.
So next we'll start learning a somewhat more accurate model of how CPU cores work.

In particular:

1. CPU cores can run instructions in parallel, even in single-threaded code running on a single core.
2. Different instructions can take different amounts of time.

In the next few chapters we'll focus on in-core parallelism and its consequences.
When we discuss reading memory in a later section we'll see how the same CPU instruction can take varying amounts of time.
