# Remove data dependencies to enable instruction-level parallelism

Choosing more scalable algorithms and removing redundant work don't require a particularly sophisticated mental model of how CPUs or compilers work.
But if you're going to write faster code, you need a more realistic model of CPUs work.

Let's do our initial setup, and then learn about:

1. Instruction-level parallelism (ILP).
2. Branch prediction, and the cost of misprediction.
3. How to take advantage of these CPU features.

In order to better demonstrate the effects of these CPU features, we will disable SIMD code generation in the code examples in this chapter; we'll talk about what SIMD means and what it does in the next chapter.

```{python}
# Disable SIMD, so it doesn't hide other effects:
import os
os.environ["NUMBA_LOOP_VECTORIZE"] = "0"

# Import the dependencies we'll need:
import numpy as np
from numba import njit
```

```{python}
#| echo: false
%load_ext book_magics
```

## Faster results with instruction-level parallelism

A reasonable minimal mental model of CPUs is that they execute one instruction at a time.
Putting aside parallelism between multiple CPU cores, which results in some very complex interactions that we won't be getting into, from the outside the CPU will indeed operate _as if_ it were executing one instruction at a time, in order.

Consider the following function:

```{python}
#| eval: false
from math import sqrt

@njit
def pythagorean_theorem(x_length, y_length):
    x_squared = x_length ** 2
    y_squared = y_length ** 2
    return sqrt(x_squared + y_squared)
```

Our expectation is that if we call `pythagorean_theorem(3, 4)`, we will get 5.
And all things being equal, faster results are better.
Thus we don't care how the CPU executes the resulting code: so long as we get the same results, faster is better.

A simplistic CPU will execute each instruction in order: first a multiply, then another, then an addition, the calculation of the square root.
But the CPUs you are using in laptops, desktops, and servers can run your code faster by running multiple instructions in parallel—so long as that won't affect the result.

In this case, calculating `x_squared` and `y_squared` is completely independent, so your CPU is likely to run both at once if it can.
This happens transparently: the compiler doesn't have to do anything special, the CPU will do this all on its own.
Importantly, this is distinct from any benefit you get from using multiple CPU cores with threads or multiple processes: this is parallelism within a single core.
If you later switch to a parallel implementation, each individual CPU core will still be able to do instruction-level parallelism.

## Bottleneck #1: Data dependencies

Not all code can be transparently run in parallel.
For one thing, a calculation can't be run if its inputs aren't yet available.
In our example above, the CPU cannot run the instructions for `x_squared + y_squared` until both inputs have been calculated, and this addition blocks the square root from being calculated.

To see the speed impact of ILP, let's look at an example: generating an array of random numbers.
For educational purposes, we find [an example of how to do this](https://nuclear.llnl.gov/CNP/rng/rngman/node4.html) and write the following code:

```{python}
from numba import uint32, uint64

# 64-bit linear congruent generator; we'll use the top 32-bits only for the
# result to maximize the cycle.
@njit("uint32(uint32)")
def lcg(seed):
    temp = uint64(seed) * 2862933555777941757 + 3037000493
    return temp >> 32

@njit
def generate_random_numbers(n):
    result = np.empty((n,), dtype=np.uint32)
    random_number = uint32(1)
    for i in range(n):
        random_number = lcg(random_number)
        result[i] = random_number
    return result
```

To get a sense of the randomness, we can visualize the result as an image:

```{python}
def to_image(f):
    return f(256 * 256 // 4).view(np.uint8).reshape((256, 256))

RAND1 = to_image(generate_random_numbers)
```

For example, in this case:

```{python}
#| echo: false
%display_image RAND1
```

Unfortunately, this calculation does not allow a lot of parallelism: `result[i+1]` cannot be calculated without knowing `result[i]`.

### Removing a data dependency

Let's try a different variant, where we calculate the random number based just on `i`, making `result[i+1]` independent of `result[i]`:

```{python}
@njit
def generate_random_numbers_2(n):
    result = np.empty((n,), dtype=np.uint32)
    for i in range(n):
        result[i] = lcg(i)
    return result

RAND2 = to_image(generate_random_numbers_2)
```

This is how it looks:

```{python}
#| echo: false
%display_image RAND2
```

Clearly this is a terrible way to generate random numbers, so we won't want to use this code in practice.
However, this change does enable a massive speedup; the number of instructions isn't that different, but the speed at which they run drops dramatically thanks to ILP:

```{python}
#| echo: false
%%compare_timing --measure=instructions
generate_random_numbers(1_000_000)
generate_random_numbers_2(1_000_000)
```

### Interleaving to avoid a data dependency

We can preserve the pseudo-randomness, while breaking the data dependency, a different way: by doing multiple different calculations that don't share a data dependency.
For random numbers, this is straightforward, we can just calculate multiple streams of random numbers and interleave them.
This should allow us to do a bunch of the calculation in parallel, while still getting better results:

```{python}
@njit
def generate_random_numbers_3(n):
    result = np.empty((n,), dtype=np.uint32)
    random_number1 = uint32(1)
    random_number2 = lcg(lcg(random_number1) + 1)
    random_number3 = lcg(lcg(random_number2) + 1)
    random_number4 = lcg(lcg(random_number3) + 1)

    # Do 4 unrelated calculations that don't share data dependencies with each
    # other, allowing the CPU to run them in parallel:
    for i in range(n // 4):
        random_number1 = lcg(random_number1)
        random_number2 = lcg(random_number2)
        random_number3 = lcg(random_number3)
        random_number4 = lcg(random_number4)
        result[i * 4    ] = random_number1
        result[i * 4 + 1] = random_number2
        result[i * 4 + 2] = random_number3
        result[i * 4 + 3] = random_number4

    # Calculate the remaining last few values:
    for i in range(n % 4):
        random_number1 = lcg(random_number1)
        result[-i] = random_number1

    return result

RAND3 = to_image(generate_random_numbers_3)
```

This is how it looks:

```{python}
#| echo: false
%display_image RAND3
```

We now have more opportunity for parallelism, as the four code paths in each loop iteration are independent of each other.

```{python}
#| echo: false
%%compare_timing --measure=instructions
generate_random_numbers(1_000_000)
generate_random_numbers_2(1_000_000)
generate_random_numbers_3(1_000_000)
```

## TODO something with parallel accumulators

TODO think about how to solve the problem in parallel

## TODO MOVE ME TODO Bottleneck #2: Conditionals and failed branch prediction

Another code structure that potentially prevents instruction-level parallelism is a conditional statement: an `if` or equivalent.
Given there are two possible sets of future instructions, the two branches of the `if`, how can the CPU know which set it should be executing in parallel?

Instead of just stopping execution until the `if` statement can be calculated, the CPU will instead make a guess, a "branch prediction".
Based on this prediction, the CPU keeps executing in parallel as if that prediction is correct.
If it turns out to be correct, all is well.
If the guess turns out to be wrong—a branch misprediction—then the work done so far has to be undone.
And that can get expensive.

However, many conditionals have very consistent answers for long stretches of time, so branch prediction will end up being very accurate.
TODO make the below a more complete code example, explaining why loops don't prevent instruction parallelism

For example, if we're iterating over a range of numbers from `0` to `N`, the CPU keeps asking "is `i` smaller than `N`?"

* Is 0 smaller than `N`?
* Is 1 smaller than `N`?
* Is 3 smaller than `N`?
* etc.

The conditional will be true for the first `N` times; only when the iteration ends does the conditional go the other way.
Given how common this sort of loop is, you can assume the branch predictor will get things right.

Some branches are unpredictable, however, and those can significantly slow down execution.
We'll talk about how to deal with those in a later chapter.
