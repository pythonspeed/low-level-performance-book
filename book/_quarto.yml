project:
  type: book

book:
  title: "Speed up your Python data processing code with a low-level compiled language"
  author: "Itamar Turner-Trauring"
  date: "7/26/2023"
  chapters:
    - index.qmd
    - part: part_1/00.qmd  # General performance
      chapters:
        - part_1/01_algorithms.qmd
        - part_1/02_generic_optimization.qmd
        - part_1/03_customize_for_your_data.qmd
    - part: part_2/00.qmd  # Compiler optimizations
      chapters:
        - part_2/01_compiler_optimizations.qmd
        - part_2/02_aliasing.qmd
        - part_2/03_bulk_objects.qmd
        - part_2/04_undefined_behavior.qmd
    - part: part_3/00.qmd  # Modern CPUs
      chapters:
        - part_3/01_instruction_level_parallelism.qmd
        - part_3/02_simd.qmd
        - part_3/03_getting_rid_of_branches.qmd
        - part_3/03b_getting_rid_of_branches.qmd
        #- complex_branches.qmd  may be a dead end
        - part_3/04_hidden_branching.qmd
        - part_3/05_more_compiler_optimizations.qmd
    - part: part_4/00.qmd  # Floating point
      chapters:
        - part_4/01_manual_optimization.qmd
        - part_4/02_using_integers_instead.qmd
        # fast math plus crt mess
    - part: part_5/00.qmd  # CPU memory cache
      chapters:
        - part_5/01_fit_in_cache.qmd
        - part_5/02_linear_scan.qmd
        - part_5/03_smaller_data_types.qmd
        - part_5/04_n_dimensional.qmd
    - part: part_6/00.qmd  # Additional topics
      chapters:
        - part_6/01_more_about_simd.qmd
        # non-contiguous views' impact on compiler?
    - part: "More examples"
      chapters:
        - part_7/01_example_rescale_contrast.qmd
        - part_7/02_example_dithering.qmd
        - part_7/03_example_memory_layout.qmd
        - part_7/04_example_branchless.qmd
  appendices:
    - appendices/01_when.qmd
    - appendices/02_prerequisites.qmd
    - appendices/03_microbenchmarking.qmd
#    - references.qmd

bibliography: references.bib

format:
  html:
    theme: cosmo
  pdf:
    documentclass: scrreprt

execute:
  cache: true


