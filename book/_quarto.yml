project:
  type: book
#  pre-render: ../src/prerender.py

book:
  title: "Practices of Performance"
  subtitle: "Speeding up computational Python"
  author: "Itamar Turner-Trauring"
  date: "7/1/2025"
  chapters:
    - index.qmd
    - 020_harm.qmd
    - 025_overview.qmd
    - 030_roadmap.qmd
    - part: "The Practice of Algorithmic Efficiency"
      chapters:
        - part_1_efficiency/000_what_is.qmd
        - part_1_efficiency/030_algorithms.qmd
        - part_1_efficiency/031_faster_algorithms.qmd
        - part_1_efficiency/035_documentation.qmd
        - part_1_efficiency/040_generic_optimization.qmd
        - part_1_efficiency/050_reuse_results.qmd
        - part_1_efficiency/085_worse_results.qmd
        #- part_1_efficiency/090_fine_tune_to_data.qmd - if you know text is english, you can... something
        # TODO copy concrete skills from Writing Efficient Programs
    - part: "The Pratice of Compilation"
      chapters:
        # - part_2_compilation/000.qmd "Compiled code is different, reuse somehow"
        - part_2_compilation/000_what_is.qmd
        - part_2_compilation/001_existing_compiled_code.qmd
        - part_2_compilation/004_vectorized_operations.qmd
        - part_2_compilation/005_speed_through_specialization.qmd
        - part_2_compilation/008_static_typing_and_monomorphization.qmd
        - part_2_compilation/009_memory_allocation.qmd
    - part: "Compiler optimization and its limits"
      chapters:
        - part_2_compilation/010_compiler_optimizations.qmd
        - part_2_compilation/013_simpler_code.qmd
        - part_2_compilation/015_floating_point.qmd
        - part_2_compilation/025_undefined_behavior.qmd
        - part_2_compilation/030_aliasing.qmd
    - part: "Tweaking compiler output and behavior"
      chapters:
        - part_2_compilation/040_reducing_type_conversions.qmd
        - part_2_compilation/080_bounds_checking.qmd
        - part_2_compilation/085_divide_by_zero.qmd
        - part_2_compilation/090_tune_for_compiler.qmd
        - part_2_compilation/120_overflow.qmd
    - part: "The Pratice of Mechanical Sympathy: CPUs"
      chapters:
        - part_3_mechanical_sympathy/000_what_is.qmd
        - part_3_mechanical_sympathy/010_instruction_level_parallelism.qmd
        - part_3_mechanical_sympathy/020_simd.qmd
        - part_3_mechanical_sympathy/030_more_about_simd.qmd
        - part_3_mechanical_sympathy/040_avoid_branches.qmd
        - part_3_mechanical_sympathy/050_branchless.qmd
        - part_3_mechanical_sympathy/059_hardware_differences.qmd
    - part: "The Pratice of Mechanical Sympathy: Memory"
      chapters:
        - part_3_mechanical_sympathy/060_memory.qmd
        - part_3_mechanical_sympathy/070_linear_scan.qmd
        - part_3_mechanical_sympathy/090_n_dimensional.qmd
        - part_3_mechanical_sympathy/095_learn_implementation_details.qmd
    - part: "The Practice of Parallelism"
      chapters:
        - part_4_parallelism/010_notes.qmd
        - part_4_parallelism/020_race_conditions.qmd
    - part: "The Practice of Process"
      chapters:
        - part_5_process/010_choosing_a_programming_language.qmd
        - part_5_process/015_profiling.qmd
        - part_5_process/020_choosing_a_metric.qmd
        - part_5_process/030_microbenchmarking.qmd
        - part_5_process/040_dont_break_your_code.qmd
        - part_5_process/050_document_your_code.qmd
        # optimization first, parallelism later
        # - part_5_process/060_keep_code_from_getting_slower.qmd
        - part_5_process/070_next_steps.qmd
        #- part_1_efficiency/07_research.qmd - mention Huang, DP algorithm

  appendices:
    - appendices/010_prerequisites.qmd
    - appendices/020_example_median_threshold.qmd
#    - references.qmd

#bibliography: references.bib

format:
  html:
    theme: cosmo
  pdf:
    documentclass: scrreprt

execute:
  cache: true
