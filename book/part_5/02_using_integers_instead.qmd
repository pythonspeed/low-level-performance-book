# Replace floats with higher-precision integer operations

TODO replace float with higher precision integer

OR NOT? The above is actually slower, but it's also a very tiny calculation

Maybe try the 7-day average

```{python}
# Import the dependencies we'll need:
import numpy as np
from numba import njit
```

```{python}
#| echo: false
%load_ext book_magics
```

```{python}
from skimage import io

IMAGE = io.imread("../images/hallway.jpg")
```

```{python}
#| echo: false
%display_image IMAGE
```

```{python}
@njit
def mean_threshold_numpy(image):
    mean = image.mean()
    return image > mean

THRESHOLD_0 = mean_threshold_numpy(IMAGE)
```

```{python}
#| echo: false
%display_image THRESHOLD_0
```

```{python}
from numba import float64

@njit
def mean_threshold(image):
    # Image is uint8, so we need an accumulator that can hold larger values:
    total = float64(0.0)
    for y in range(image.shape[0]):
        for x in range(image.shape[1]):
            total += image[y, x]
    mean = total / image.size
    result = np.empty(image.shape, dtype=np.uint8)
    for y in range(image.shape[0]):
        for x in range(image.shape[1]):
            result[y, x] = (image[y, x] >= mean) * 255
    return result

THRESHOLD_1 = mean_threshold(IMAGE)
```

```{python}
#| echo: false
%display_image THRESHOLD_1
```

```{python}
#| echo: false
%%compare_timing --measure=instructions
mean_threshold_numpy(IMAGE)
mean_threshold(IMAGE)
```

```{python}
from numba import uint64, uint8

@njit
def mean_threshold_2(image):
    total = uint64(0)
    for y in range(image.shape[0]):
        for x in range(image.shape[1]):
            total += image[y, x]
    mean = total / image.size
    result = np.empty(image.shape, dtype=np.uint8)
    for y in range(image.shape[0]):
        for x in range(image.shape[1]):
            result[y, x] = (image[y, x] >= mean) * 255
    return result

THRESHOLD_2 = mean_threshold_2(IMAGE)
```

```{python}
#| echo: false
%display_image THRESHOLD_2
```

```{python}
#| echo: false
%%compare_timing --measure=instructions
mean_threshold(IMAGE)
mean_threshold_2(IMAGE)
```

```{python}
@njit
def mean_threshold_3(image):
    total = uint64(0)
    for y in range(image.shape[0]):
        for x in range(image.shape[1]):
            total += image[y, x]

    # Convert mean to uint8 before we do the comparison:
    mean = uint8(np.round(total / image.size))
    result = np.empty(image.shape, dtype=np.uint8)
    for y in range(image.shape[0]):
        for x in range(image.shape[1]):
            result[y, x] = (image[y, x] >= mean) * 255
    return result

THRESHOLD_3 = mean_threshold_3(IMAGE)
```

```{python}
#| echo: false
%display_image THRESHOLD_3
```

```{python}
#| echo: false
%%compare_timing --measure=instructions
mean_threshold(IMAGE)
mean_threshold_3(IMAGE)
```
