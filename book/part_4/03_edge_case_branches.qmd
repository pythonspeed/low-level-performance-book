# Get rid of edge-case branches

Some branches are there to handle a rare edge case.
Given most data won't be an edge case, this branch should be easy to predict.
Even so, calling the same code over and over in an inner loop is a waste of resources.
If you can, handling edge cases separately can speed up your code.

```{python}
# Import the dependencies we'll need:
import numpy as np
from numba import jit
```

```{python}
#| echo: false
%load_ext book_magics
```

## Example: A literal edge case

Let's say we have a time series of daily values between 0 and 1, and we want to calculate the 7-day moving average.
For most values we just calculate the average of the previous (inclusive) 7 values.
But for the first 6 days, we won't have sufficient previous values.
There are various strategies to deal with this missing data, and in this case we'll just repeat the value in the first day:

```{python}
DATA = np.random.random((1_000_000,))

@jit
def moving_average(timeseries):
    result = np.empty(timeseries.shape, dtype=np.float64)
    first_day = timeseries[0]
    for i in range(len(timeseries)):
        total = 0
        if i < 6:
            # Fill in missing values for first few days:
            total += (6 - i) * first_day
        for j in range(max(i - 6, 0), i + 1):
            total += timeseries[j]
        result[i] = total / 7
    return result
```

A likely performance problem with this code is the `if i < 6`: it's being called on every single iteration of the loop, even though it's only needed for the first 6 iterations.

## Don't use branchless code when the branch is predictable

In the previous chapter we saw how we can replace branches with branchless code, which can help get rid of the cost of mispredicted branches.
We can do that here too:

```{python}
@jit
def moving_average_branchless(timeseries):
    result = np.empty(timeseries.shape, dtype=np.float64)
    first_day = timeseries[0]
    for i in range(len(timeseries)):
        # ðŸ¥± Fill in missing values for first few days with branchles code:
        total = first_day * max(6 - i, 0)
        for j in range(max(i - 6, 0), i + 1):
            total += timeseries[j]
        result[i] = total / 7
    return result

assert np.array_equal(
    moving_average(DATA),
    moving_average_branchless(DATA)
)
```

This won't speed up our code, because the branch we just replaced is very predictable.
After the first 6 iterations, it's never taken.
So a branchless solution is still doing extra, unnecessary work for the vast majority of iterations:

```{python}
#| echo: false
%%compare_timing --measure=instructions,branch_mispredictions
moving_average(DATA)
moving_average_branchless(DATA)
```

## Move edge-case handling into a separate code path

A better optimization is to handle the first 6 days separately, with their own code path.
That means the rest of the calculations can safely assume that 7 days of data are always available:

```{python}
@jit
def moving_average_3(timeseries):
    result = np.empty(timeseries.shape, dtype=np.float64)

    # ðŸ˜Ž Handle the first 6 days on their own:
    first_day = timeseries[0]
    for i in range(6):
        total = first_day * (6 - i)
        # Fill in missing values for first few days:
        for j in range(i + 1):
            total += timeseries[j]
        result[i] = total / 7

    # ðŸ˜Ž Then handle the bulk of the data, without the extra branch we
    # previously had:
    for i in range(6, len(timeseries)):
        total = 0
        for j in range(i - 6, i + 1):
            total += timeseries[j]
        result[i] = total / 7
    return result

assert np.array_equal(
    moving_average(DATA),
    moving_average_3(DATA)
)
```

This version is faster, by removing work from the main loop:

```{python}
#| echo: false
%%compare_timing --measure=instructions
moving_average(DATA)
moving_average_3(DATA)
```
