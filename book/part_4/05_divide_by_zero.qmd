# Use faster division-by-zero handling when possible

Another source of hidden branches is division by zero.

Dividing by zero is mathematically meaningless, so programming languages need to decide how to handle it for different data types.
For example, in Python you get a `ZeroDivisionError` by default, whereas NumPy floats return the special value `inf`/`-inf`/`nan` when divided by zero (for positive numbers, negative numbers, and zero, respectively).

If your programming language has any sort of error handling for divide by zero, behind the scenes that will require generating the equivalent of an `if` statement any time division by a variable happens.
This is complicated by the fact that there are two possible policies, one for integers and one for floating point numbers.
For performance purposes, the languages that add these hidden branches for potential division by zero are:

* **Rust:** Integer division adds a branch to check for division by zero, floating point division by zero returns `inf`/`-inf`/`nan` and therefore doesn't need extra branches.
* **Numba:** By default, both floating point and integer division by zero will cause a `ZeroDivisionError` exception.
* **Cython:** By default, both floating point and integer division by zero will cause a `ZeroDivisionError` exception.

```{python}
#| echo: false
%load_ext book_magics
```

```{python}
import numpy as np
from numba import njit
```

## Example: The potential for divide by zero adds branches

In some cases the compiler can optimize the check for zero division so it only happens once, if you're repeatedly dividing by the same number.
In other cases, however, the compiler can't help.
Let's compare addition to float division, and see how many branches each version of the code has.
We'll disable bounds checking so that its impact doesn't confuse the impact of division:

```{python}
FLOAT_DATA = np.arange(0, 1_000_000, dtype=np.float64)
FLOAT_DATA2 = np.ones(1_000_000, dtype=np.float64)

@njit(boundscheck=False)
def add(arr, arr2):
    out = np.empty(arr.shape, dtype=arr.dtype)
    for i in range(len(arr)):
        out[i] = arr[i] / arr2[i]
    return out

@njit(boundscheck=False)
def float_divide(arr, arr2):
    out = np.empty(arr.shape, dtype=arr.dtype)
    for i in range(len(arr)):
        out[i] = arr[i] / arr2[i]
    return out

_ = add(FLOAT_DATA, FLOAT_DATA2)
_ = float_divide(FLOAT_DATA, FLOAT_DATA2)
```

Let's compare the two functions:

```{python}
#| echo: false
%%compare_timing --measure=instructions,branches
add(FLOAT_DATA, FLOAT_DATA2)
float_divide(FLOAT_DATA, FLOAT_DATA2)
```

The `add()` function has vastly fewer instructions and branches than the `float_divide()` version, because it was auto-vectorized and was able to use SIMD instructions.
Our hypothesis is that the reason the `float_divide()` function wasn't auto-vectorized was due to an implicit branch being added to check for division by zero.

How to fix this?

## Switch to a mode without zero-division branches

Numba and Cython allow you to disable the `ZeroDivisionError` check that adds an additional branch.
For Numba you do this by choosing the "NumPy error model", which means:

* Integer division by zero returns zero, which is perhaps not what you'd expect.
  Plus, it doesn't actually help much with speeding up integer division.
  The Cython equivalent (`cdivision`) probably does help performance for integer division, but has a large number of semantic impacts so [read the documentation carefully](https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives).
* Floating point division by zero gives `inf`, `NaN`, or `-inf` depending on whether it's dividing a positive number, zero, or a negative number.

Here's how we enable this mode:

```{python}
@njit(error_model="numpy", boundscheck=False)
def float_divide2(arr, arr2):
    out = np.empty(arr.shape, dtype=arr.dtype)
    for i in range(len(arr)):
        out[i] = arr[i] / arr2[i]
    return out

_ = float_divide2(FLOAT_DATA, FLOAT_DATA2)
```

And now division successfully auto-vectorizes:

```{python}
#| echo: false
%%compare_timing --measure=instructions,branches
float_divide(FLOAT_DATA, FLOAT_DATA2)
float_divide2(FLOAT_DATA, FLOAT_DATA2)
```
