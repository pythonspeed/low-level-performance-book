# Example: Branchless programming with more than two branches

Let's consider a slightly more complex example, where we have three different branches.
We have a time series of numbers, and want to record how many times values went up, stayed the same, or went down compared to the previous value.

```{python}
import numpy as np
from numba import njit
```

```{python}
#| echo: false
%load_ext book_magics
```

```{python}
@njit
def count_sequences(arr):
    DECREASE, UNCHANGED, INCREASE = 1, 2, 3
    prev_value = 0
    prev_status = UNCHANGED
    decreased = 0
    increased = 0
    unchanged = 0
    for i in range(len(arr)):
        value = arr[i]
        if value > prev_value:
            status = INCREASE
        elif value == prev_value:
            status = UNCHANGED
        else:
            status = DECREASE
        if status != prev_status:
            if status == INCREASE:
                increased += 1
            elif status == UNCHANGED:
                unchanged += 1
            else:
                decreased += 1
        prev_status = status
        prev_value = value
    return decreased, unchanged, increased
```

For example, we expect this to to have 2 increasing, 1 unchanged, and 1 decreasing sequences:

```{python}
print(
    count_sequences(
        np.array([1, 2, 3, 2, 2, 4], dtype=np.uint64)
    )
)
```

We can run this on data that is always increasing, which means branch prediction will work well, and randomized data where branch prediction is impossible:

```{python}
# Increases linearly from 1 to 1,000,000:
PREDICTABLE_DATA = np.linspace(1, 1_000_000, 1_000_000, dtype=np.uint64)
# Shuffled randomly:
SHUFFLED_DATA = PREDICTABLE_DATA.copy()
np.random.shuffle(SHUFFLED_DATA)
```

```{python}
#| echo: false
%%compare_timing --measure=branches,branch_mispredictions
count_sequences(PREDICTABLE_DATA)
count_sequences(SHUFFLED_DATA)
```

As you can see, random data results in much slower execution even though the number of CPU instruction should be basically the same.
The problem: branch misprediction.

## Simplifying the logic with result indexing

Instead of having different variables for the results, we can use an array; this enables us to use indexing to choose where to put the result.
We still have unpredictable branches, but the code is easier to reason about:

```{python}
@njit
def count_sequences_2(arr):
    # We'll use these as indexes into the result array:
    DECREASE, UNCHANGED, INCREASE = 0, 1, 2
    prev_value = 0
    prev_status = UNCHANGED
    result = np.zeros((3,), dtype=np.uint64)

    for i in range(len(arr)):
        value = arr[i]
        if value > prev_value:
            status = INCREASE
        elif value == prev_value:
            status = UNCHANGED
        else:
            status = DECREASE
        if status != prev_status:
            result[status] += 1
        prev_status = status
        prev_value = value
    return result[0], result[1], result[2]

assert np.array_equal(
    count_sequences(SHUFFLED_DATA),
    count_sequences_2(SHUFFLED_DATA)
)
```

```{python}
#| echo: false
%%compare_timing --measure=branches,branch_mispredictions
count_sequences(PREDICTABLE_DATA)
count_sequences(SHUFFLED_DATA)
count_sequences_2(PREDICTABLE_DATA)
count_sequences_2(SHUFFLED_DATA)
```

## Switching to branchless code

Since we don't want branches, we want the same code to run every time, no matter what:

```{python}
@njit
def count_sequences_branchless_1(arr):
    DECREASE, UNCHANGED, INCREASE = 0, 1, 2
    prev_value = 0
    prev_status = UNCHANGED
    result = np.zeros((3,), dtype=np.uint64)

    for i in range(len(arr)):
        value = arr[i]
        #status = INCREASE if value > prev_value else UNCHANGED
        #status = DECREASE if value < prev_value else status
        status = 1 + int(value > prev_value) - int(value < prev_value)
        result[status] += 1 if status != prev_status else 0
        prev_status = status
        prev_value = value
    return result[0], result[1], result[2]

assert np.array_equal(
    count_sequences(SHUFFLED_DATA),
    count_sequences_branchless_1(SHUFFLED_DATA)
)
```

```{python}
#| echo: false
%%compare_timing --measure=branches,branch_mispredictions
count_sequences(PREDICTABLE_DATA)
count_sequences(SHUFFLED_DATA)
count_sequences_branchless_1(PREDICTABLE_DATA)
count_sequences_branchless_1(SHUFFLED_DATA)
```

By getting rid of branches, we've significantly sped up the `SHUFFLED_DATA` case.
The `PREDICTABLE_DATA` case is slower, which is a common outcome of branchless programming: we're doing more work on every iteration, since we can't shortcut out with a branch.
However, what is less expected is that `count_sequences_branchless_1(PREDICTABLE_DATA)` runs much slower than `count_sequences_branchless_1(SHUFFLED_DATA)`.
This can't be because of branch prediction, though, since we've gotten rid of all the branches!

Can you figure out what is causing the difference in performance?

## Fixing our inconsistent performance

The reason our latest version is slower on `PREDICTABLE_DATA` is that `result[INCREASE]` has become a data dependency.
It gets written to in every loop iteration, because `PREDITABLE_DATA`'s has continuously increasing time series.
That means the CPU can't use instruction-level parallelism to do multiple iterations of the loop in parallel.
For `SHUFFLED_DATA` this is less of a problem because loop iterations don't always write to the same place: sometimes the sequence increases, sometimes it decreases.

We can fix, or at least reduce, the data dependency problem by having multiple accumulators:

```{python}
@njit
def count_sequences_branchless_2(arr):
    DECREASE, UNCHANGED, INCREASE = 0, 1, 2
    prev_value = 0
    prev_status = UNCHANGED
    result = np.zeros((3,8), dtype=np.uint64)

    for i in range(len(arr)):
        value = arr[i]
        status = INCREASE if value > prev_value else UNCHANGED
        status = DECREASE if value < prev_value else status
        result[status, i % 8] += 1 if status != prev_status else 0
        prev_status = status
        prev_value = value
    return result[0].sum(), result[1].sum(), result[2].sum()

assert np.array_equal(
    count_sequences(SHUFFLED_DATA),
    count_sequences_branchless_2(SHUFFLED_DATA)
)
```

```{python}
#| echo: false
%%compare_timing --measure=branches,branch_mispredictions
count_sequences(PREDICTABLE_DATA)
count_sequences(SHUFFLED_DATA)
count_sequences_branchless_2(PREDICTABLE_DATA)
count_sequences_branchless_2(SHUFFLED_DATA)
```

Our latest code now has consistent performance for different inputs.
And for cases where the time series isn't predictable, it runs 3.5Ã— as fast as the original version.

