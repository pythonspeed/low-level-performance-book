# Introduction {.unnumbered}

Your software is too slow.
Now what?

In many ways this depends on what kind of software you're writing: web applications, video games, and scientific computing all have different bottlenecks.
This book is specifically written for scientists, data scientists, and software developers who use Python to do numeric computing or data processing.

There are also many potential reasons your software might be slow.
This book limits itself to one particularly pervasive performance bottleneck: computation.
That is, the work your CPU does to calculate results, as well as related bottlenecks like memory.
I provide a quick review of the bigger picture of performance in the first chapter of the book, together with references to additional resources.

Assuming your performance bottleneck is computation, how do you speed it up?

## Speeding up Python-based data processing computation

Python[^cpython] is notoriously slow, but often used to handle large-scale data processing.
Getting faster results typically involves writing Python extensions in a fast, low-level, compiled language: C, C++, Fortran, Cython, Numba, Rust, and others.

There are many pre-written compiled extensions available as free libraries: NumPy, SciPy, Pandas, and Polars, to name just a few.
Typically they work by operating on batches of data—an array, or a dataframe.

Sometimes, however, preexisting libraries aren't fast enough, or aren't memory efficient enough, or simply don't implement the algorithms you need.
In that case, the common advice you'll get is:

1. Re-write your code in a compiled language.
2. Then, take advantage of parallelism, using multiple CPU cores.

Unfortunately, there's a key step missing in the middle of this process.

## The missing step: optimization

Here's a better plan for speeding up your computational code:

1. Re-write your code in a compiled language.
2. **Optimize your code:** make the compiled code faster, still on a single CPU.
   This is the bulk of what we'll focus on in this book.
3. Then, take advantage of parallelism, using multiple CPU cores.

Optimizing your code is multiplicative with parallelism: if you can make your code 10× faster on a single thread, and then 10× faster with parallelism, you will get results 100× faster.
And unlike parallelism, optimization reduces computation costs, since you get faster results without paying for more expensive hardware.
For similar reasons, it also reduces carbon emissions.

Ready to get faster results from your code?
Let's get started!

[^cpython]: Technically, it's not the language that's slow, it's the default implementation. To distinguish the two, the Python interpreter is often known as CPython. The PyPy interpreter is a different implementation of the language that can do math much faster, but it adds overhead when interoperating with NumPy and other similar libraries, and lags behind on language features.
