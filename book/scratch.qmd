# First pass optimization: algorithms and repetitive work

Since we likely had to rewrite code, worth looking at generic optimization approaches.

Again, don't use O(N^2)

Get rid of repetitive work, e.g. move expensive work out of hot loops

move prints out of hot loops

```{python}
import numpy as np
from numba import njit

@njit
def with_dependency(times, x, y):
    acc = 0.0
    for i in range(times):
        acc = (acc + x) + y * i
    return acc

with_dependency(100_000, 0.1, 0.2)
```

We can time it:

```{python}
%timeit with_dependency(100_000, 0.1, 0.2)
```


```{python}
import numpy as np
from numba import njit

@njit
def without_dependency(times, x, y):
    acc = 0.0
    for i in range(times):
        acc = acc + (x + y * i)
    return acc

without_dependency(100_000, 0.1, 0.2)
```

We can time it:

```{python}
%timeit without_dependency(100_000, 0.1, 0.2)
```

```{python}
import numpy as np
from numba import njit

DATA = np.linspace(0.0, 1000.0, 1_000_000, dtype=np.float64)

@njit
def sum_of_squares_1(arr):
    total = 0
    for value in arr:
        total += value ** 2
    return total

sum_of_squares_1(DATA)
```

We can time it:

```{python}
%timeit sum_of_squares_1(DATA)
```


```{python}
@njit
def sum_of_squares_2(arr):
    total = 0
    for i in range(len(arr) // 4):
        total += (
            arr[i * 4] ** 2 +
            arr[(i * 4) + 1] ** 2 +
            arr[(i * 4) + 2] ** 2 +
            arr[(i * 4) + 3] ** 2
        )
    for i in range(len(arr) % 4):
        total += arr[-i] ** 2
    return total

sum_of_squares_2(DATA)
```

We can time it:

```{python}
%timeit sum_of_squares_2(DATA)
```

