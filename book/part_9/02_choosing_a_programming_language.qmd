# Choose an appropriate compiled programming language

If you've determined that computation is a performance bottleneck, and switching to a compiled language is your best approach, you need to choose which programming language to use.
This is a very contextual decision, and your choices may be constrained in various ways that make the decision easier.
For example, if you are:

* ... exposing a C++ library to Python you'll be using C++ directly or indirectly, regardless of your opinion of the language.
* ... don't know any compiled languages, and don't have time to learn a new one, you'll probably want to use Numba or Cython.
* ... contributing to an open source project, you'll need to use whatever languages they are comfortable accepting.

## Numba

Most of the examples in this book use Numba, and the same benefits apply for using it in your application.

Benefits:

* Python syntax.
* Compilation happens when you first use the code, so distributing your compiled code is no different than distributing Python code.
* Built-in support for NumPy.
* Optional features like parallelism and CUDA (Nvidia GPU) support.

Downsides:

* Not a general purpose programming language, it's only designed for speeding up numeric Python.
* There's only a tiny ecosystem of pre-written libraries.

Packaging:

* Just add `numba` as a dependency for your Python application, and you're all set.

## C

It's been around since 1970!
And it shows.

Benefits:

* The CPython and NumPy APIs are written in C, so you have the most straightforward full access to their low-level functionality.
* Very simple language.

Downsides:

* Extremely easy to shoot yourself in the foot with undefined behavior, memory corruption, and crashes.
* Tiny standard library, so you'll lack any high-level datastructures.
* No standard package manager or standard build system for any C libraries you might want to use.
* Too simple, it's a lot of work to get anything done.

Packaging your code:

* You'll want to use `setuptools` to build the extension.
* If you're building anything complex with dependencies... good luck!

## C++

Somewhat backwards compatible with C, but also provides a much higher-level language.
The high-level language lets you build abstractions that don't have a performance cost, thanks to compiler features like inlining.

Benefits:

* High-level language with idioms that make it easier to avoid some of C's antipatterns.
* Rich standard library, with many useful data structures.

Downsides:

* Complex language.
* Very easy to shoot yourself in the foot with undefined behavior, memory corruption, and crashes.
* No standard package manager or standard build system for any C++ libraries you might want to use.

Packaging your code:

* You can bind C++ to Python using libraries like [`pybind11`](https://pybind11.readthedocs.io/) or the lower overhead [`nanobind`](https://nanobind.readthedocs.io/).
* For `pybind11` you can use `setuptools` to integrate the build with your Python packaging.
* For `nanobind` the documentation suggests CMake, a C++ build system which personally makes me want to run away screaming.

## [Cython](https://cython.readthedocs.io/)

Cython implements most of Python's syntax, along with syntax extensions that let you mix in C or C++ functionality.
Before you compile it, it gets translated to C or C++, and that's what actually gets compiled to machine code.
You can use it to wrap C or C++ libraries, though I'm not personally a fan of using it for wrapping C++.

Benefits:

* Mostly just Python syntax, so it's easy to learn.
* Access to C++ standard library for fast datastructures.
* If you're using Jupyter notebooks, you can use [inline Cython](https://cython.readthedocs.io/en/latest/src/quickstart/build.html#using-the-jupyter-notebook) in your cells.

Downsides:

* Depending on your usage patterns, inherits C and C++'s shooting-yourself-in-the-foot problems with undefined behavior and memory corruption.
* Inherits C and C++'s lack of package manager, somewhat mitigated by relying on Python's packaging system.
* The two steps to build (translation then compilation) means compilation errors can sometimes be hard to debug, especially if you're targeting C++.

Packaging your code:

* You'll want to use `setuptools` to build the extension.

## [Rust](https://www.rust-lang.org/)

Designed as a replacement for C++, without C++'s problems: a language that can run extremely fast, do both low-level and high-level programming, but without C++'s memory-safety and thread-safety problems.

Benefits:

* Expressive language that can model high-level abstractions, while still being quite fast.
* Decent standard library.
* Package manager and build system are built-in, so you can automatically download open source libraries and build them out of the box.
* Memory-safe by default.
  That means no undefined behavior and no memory corruption.
* Thread-safe by default.
  Parallelism and concurrency can be implemented without worrying about corrupting your data.

Downsides:

* Complex language.
* Relatively new language (Rust 1.0 was released in 2015), so availability of specialized libraries and functionality is more limited.
  For example, as of mid-2024, high-level SIMD support is either experimental (in the language itself) or reliant on somewhat limited third-party libraries.

Package your code:

* Python extensions are implemented using the [PyO3](https://pyo3.rs/) Rust library.
* You can use [`setuptools-rust`](https://setuptools-rust.readthedocs.io/) to add Rust support to a Python `setuptools` project.
* If you're building a standalone Rust-based Python extension, e.g. an open source library, [Maturin](https://www.maturin.rs/) is a really slick and easy-to-use alternative to `setuptools-rust`/`setuptools`.

## Other programming language options

There are other languages with support for writing extensions for Python.
These include [Fortran](https://numpy.org/doc/stable/f2py/), [Julia](https://github.com/JuliaPy/PythonCall.jl), and many others.
Lacking personal experience or more research, I can't really speak to the tradeoffs involved.

## Make sure your compiled code works everywhere you care about

Whatever you choose, with the exception of Numba (and Cython if you're only using Jupyter notebooks), you will need to compile the code before your Python extension can be imported.
There are potential compatibility issues when distributing binary packages from one computer to another.
For example, if you compile on Ubuntu 24.04, the resulting wheel likely won't work on versions of Linux released before April 2024.
So make sure to compile your released code on an operating system that is the same or older than the one where you will deploy your code.

If you want to distribute a package that can be installed with `pip` or similar tools, you'll distribute a "wheel", a binary package tied to a specific platform, e.g. Linux on x86-64.
A tool like [`cibuildwheel`](https://cibuildwheel.pypa.io/en/stable/) allows you to build your wheels in a way that makes them easy to distribute across older Linux, macOS, and Windows versions.

