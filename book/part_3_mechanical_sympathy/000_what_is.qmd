# What is the Practice of Mechanical Sympathy?

Consider the following situation: you're on a bike, stopped at a traffic light.
Then it's your turn to go, you start pedaling, and you realize you're in a high gear, so it takes lots of work to get moving.
You ought to be in a low gear, but you aren't.

And then you notice this _keeps happening_: every time you start biking from a stop in an intersection, you're in the wrong gear.
What is going wrong?

1. When you approach an intersection, you're probably in a high gear.
2. You stop at the traffic light, still in a high gear.
3. If you have a bike with a derailleur, the default where I live, changing gears requires pedaling.
4. Now that you've stopped, you can't change gears any more until you start pedaling again, and so you're forced to start in a high gear.

To solve this problem, you need to plan ahead and adjust your behavior to the way the bicycle works.
As you approach the intersection, you start lowering your gears, so by the time you've stopped you're in the correct low gear to easily start biking again.

As with bicycles, so with computers: if you have a better mental model of how the CPU works, you can adjust your code so that takes advantage of the CPU's performance features, rather than fighting them.
This is the Practice of Mechanical Sympathy.
