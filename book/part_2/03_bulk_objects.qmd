# Use appropriate data structures when communicating to and from Python

This book is aimed at Python developers, with the assumption you're probably going to use Python code to interact with any low-level code you write.
This means you need to get data back and forth from Python to the compiled code, and you want to do that efficiently.

There's a problem, though: CPython represents objects rather differently than compiled languages do.
For example, let's say you have a 64-bit integer, and you want to turn it into a Python integer.
Here's the CPython interpreter does it; you don't have to understand the code, the important thing is to notice it's doing quite a bit of work:

```c
// This code snippet is copyright Â© 2001-2023 Python Software Foundation;
// All Rights Reserved.
//
// See https://docs.python.org/3/license.html for the full license.
PyObject *
PyLong_FromLong(long ival)
{
    PyLongObject *v;
    unsigned long abs_ival, t;
    int ndigits;

    /* Handle small and medium cases. */
    if (IS_SMALL_INT(ival)) {
        return get_small_int((sdigit)ival);
    }
    if (-(long)PyLong_MASK <= ival && ival <= (long)PyLong_MASK) {
        return _PyLong_FromMedium((sdigit)ival);
    }

    /* Count digits (at least two - smaller cases were handled above). */
    abs_ival = ival < 0 ? 0U-(unsigned long)ival : (unsigned long)ival;
    /* Do shift in two steps to avoid possible undefined behavior. */
    t = abs_ival >> PyLong_SHIFT >> PyLong_SHIFT;
    ndigits = 2;
    while (t) {
        ++ndigits;
        t >>= PyLong_SHIFT;
    }

    /* Construct output value. */
    v = _PyLong_New(ndigits);
    if (v != NULL) {
        digit *p = v->long_value.ob_digit;
        _PyLong_SetSignAndDigitCount(v, ival < 0 ? -1 : 1, ndigits);
        t = abs_ival;
        while (t) {
            *p++ = (digit)(t & PyLong_MASK);
            t >>= PyLong_SHIFT;
        }
    }
    return (PyObject *)v;
}
```

If you're passing an integer or two, this overhead probably doesn't matter.
But for large amounts of data, this overhead adds up.
Imagine you want to pass an array of 64-bit integers to CPython, so normal Python code can interact with it.
This would involve creating a Python list, and then running the above conversion code for every integer.
This is quite a bit of effort just to pass some data around, not to mention all the extra memory you will need to allocate.

And this is just one direction, from compiled code to Python.
The other direction, converting a Python list of integers into an array of 64-bit integers so you an easily access the low-level code, is equally time-consuming and expensive.
Plus, you'll need to check that every value actually is an integer, and that it fits in 64-bit.
All of this will slow down your code, reducing the performance benefit of using a compiled language.

The way to avoid this expense: using container objects specifically designed for fast access from low-level compiled languages.

## Choose appropriate data structures

Different data structures are available in common Python libraries, specifically designed to allow efficient access from low-level languages.
Some examples:

**N-dimensional arrays:** NumPy arrays have a specific data type, for example a 64-bit signed integer, and internally are created as a contiguous array.
That means low-level code can access the items in a NumPy array with dtype `np.int64` just like it would any array of 64-bit signed integers: very quickly.

**Dataframes:** Dataframes have named columns which can be different types, similar to a spreadsheet.
Older versions of Pandas used NumPy arrays internally, and newer versions still support this format for now.
However, newer libraries like Polars (always) and Pandas 2 (for now optionally) use Apache Arrow, which is a columnar data structure designed for efficient access from low-level languages.
There are Arrow implementations for C++, Rust, and other languages, and it can also be used from Cython, and all of them can easily inter-operate because they use the same in-memory representation.

For both NumPy arrays and Apache Arrow, as well as other data structures designed with this use case in mind, the cost of transferring between Python and the low-level language is negligible.
In this book we'll mostly use examples involving NumPy arrays, but the same principles apply to any data structure that can be cheaply passed between Python and low-level languages.

