# Compiled code is different

So far we've treated Numba, and by extension other compiled languages, as a magic wand: wave it over your code, and your code runs faster.
Next we'll learn a bit more about how these languages work, so you can understand what they can do for you, and when they'll fail.

Examples of compiled languages include C, C++, Rust, Fortran, and Numba.
Cython is another compiled language you can use, with an extra stage of processing: first it is translated into C or C++, and then the C/C++ code is compiled to machine code.
All of these languages, as typically implemented anyway, share the following properties:

1. **Compilation to machine code:** Before the code can be run, the code is converted ("compiled") to machine code using a tool called a "compiler".
   Machine code is the set of binary instructions your CPU runs.
   By generating machine code, the compiled output can run directly on the CPU, without any additional software-based translations.
2. **Optimization as part of compilation:** Typically, before compilation to machine code, the compiler optimizes the code by transforming it in ways that will make it faster.
   We'll see some examples in the next chapter.
3. **Static typing:** In most cases, the compiler knows each variable's specific type at compile time.
   It might be a 64-bit integer, it might be something more complex, but this information is available to the compiler.

These properties allow compiled code to run faster.
But compilers aren't magic: understanding how they work, and their limitations, can still help you write faster code.
