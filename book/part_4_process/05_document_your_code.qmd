# Ensure your code is maintainable

Code that has been optimized for speed can often be less readable, because it prioritizes the needs of the CPU or compiler rather than needs of the reader.
This can be a problem if you later need to change your algorithm, debug problems, or try a different optimization approach.

## Consider if an optimization is worth its maintenance cost

If an optimization makes your code 5% faster, but makes it impossible to understand how your code works, is that worth doing?
In some situations, those 5% will be critical.
Most of the time, it's better to stick with the easier-to-understand code.

## Provide detailed documentation of your algorithm

Add a docstring to your function explaining in detail, from a user's perspective, what it does and why.
This will also help remind a future version of you why you wrote this function.

## Consider providing a reference implementation

As we mentioned in the previous chapter, keeping the original simpler version of your algorithm is useful for testing the correctness of the optimized version.
You can also keep that reference implementation around for documentation purposes.
You can add a comment to your optimized code referring the reader to the test module for the reference implementation.
The tests you'll write will ensure the reference implementation and optimized implementation don't diverge.

## Add comments explaining how you optimized your code

As I've optimized code in this book, I've added comments about specific optimizations done at each step.
For real code, you should add detailed comments for _all_ the optimizations you do, not just the latest ones.
Explain why you did it, and your theory of why it helped.
Then when six months from now you're confused by weird code structure, you'll have some notion of why the code looks the way it does.

## Add type annotations and use a type checker

Python supports type annotations, that can tell you what types your functions take as input, and the type of the output.
You can validate these annotations with tools like [Mypy](https://mypy-lang.org/).

Type annotations have multiple benefits:

* Mypy can catch bugs in your code as part of your automated code testing.
* Your editor can help auto-complete, and highlight potential errors as you type.
* The annotations help document your code so its intent is clearer.
