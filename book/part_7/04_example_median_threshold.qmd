# Example: Local thresholding on an image

```{python}
#| echo: false
%load_ext book_magics
```
```{python}
import numpy as np
from numba import jit
from skimage import io
from skimage.data import page
from skimage.filters import threshold_local

IMAGE = page()
assert IMAGE.dtype == np.uint8
```

```{python}
#| echo: false
%display_image IMAGE
```

```{python}
def skimage_median_local_threshold(img):
    threshold = threshold_local(
        img, block_size=11, method="median", offset=10
    )
    result = (img > threshold).astype(np.uint8)
    result *= 255
    return result

SKIMAGE_RESULT = skimage_median_local_threshold(IMAGE)
```

```{python}
#| echo: false
%display_image SKIMAGE_RESULT
```

```{python}
@jit
def median_local_threshold(img, block_size, offset):
    block_size = (block_size - 1) // 2
    result = np.empty(img.shape, dtype=np.uint8)
    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            median = np.median(img[max(i - block_size, 0):min(i+block_size, img.shape[0]),max(j - block_size, 0):min(j+block_size, img.shape[1])])
            if img[i, j] > median - offset:
                result[i, j] = 255
            else:
                result[i, j] = 0
    return result

NUMBA_RESULT1 = median_local_threshold(IMAGE, 11, 10)
```

```{python}
#| echo: false
%display_image NUMBA_RESULT1
```

```{python}
#| echo: false
%%compare_timing --measure=instructions
skimage_median_local_threshold(IMAGE)
median_local_threshold(IMAGE, 11, 10)
```

```{python}
@jit
def median_local_threshold2(img, block_size, offset):
    block_size = (block_size - 1) // 2
    result = np.empty(img.shape, dtype=np.uint8)
    histogram = np.empty((256,), dtype=np.uint32)

    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            histogram[:] = 0
            view = img[max(i - block_size, 0):min(i+block_size, img.shape[0]),max(j - block_size, 0):min(j+block_size, img.shape[1])].ravel()
            for k in range(len(view)):
                histogram[view[k]] += 1
            threshold = len(view) // 2
            for l in range(256):
                threshold -= histogram[l]
                if threshold < 0:
                    break
            median = l
            if img[i, j] > median - offset:
                result[i, j] = 255
            else:
                result[i, j] = 0
    return result

NUMBA_RESULT2 = median_local_threshold2(IMAGE, 11, 10)
```

```{python}
#| echo: false
%display_image NUMBA_RESULT2
```

```{python}
#| echo: false
%%compare_timing --measure=instructions
median_local_threshold(IMAGE, 11, 10)
median_local_threshold2(IMAGE, 11, 10)
```
