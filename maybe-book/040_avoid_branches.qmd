# Avoid unnecessary branches, especially hard-to-predict ones

`if` statements, `for` loops, `while` loop, and other less obvious code structures can result in branches in your code.
These branches can cause performance problems, for a number of reasons.


## Branches can make it harder to compile efficient code

Code with branches makes it harder for the compiler to generate efficient code:

* **The compiler may have a harder time optimizing your code in general.**
  If your code has two different branches, it will be difficult or impossible for the compiler to combine that code with previous and later code.
* **The compiler may have a harder time using auto-vectorization to generate SIMD code.**
  SIMD instructions do the same thing to multiple data values, and a branch might make it impossible to do the same thing.
  Modern CPUs have "masked" SIMD operations that allow running operations on only a subset of values, and compilers will take advantage of this, but there's a limit to how much these instructions can do.

## Branches can make the CPU run your code slower due to branch misprediction

Branches have another performance impact at runtime, due to interactions with instruction-level parallelism (ILP).
As we discussed in a previous chapter, ILP allows the CPU to run multiple instructions in parallel if it knows they don't depend on each other.

Branches present a problem for ILP: given there are two possible sets of future instructions, for example the two branches of an `if` statement, how can the CPU know which set it should be executing in parallel?

Instead of just stopping execution until the `if` statement can be calculated, the CPU will instead make a guess, a "branch prediction."
Based on this prediction, the CPU speculatively keeps executing code in parallel _as if_ that prediction is correct.

* If the chosen branch turns out to be correct, all is well, and your code will run faster.
* If the guess turns out to be wrong—a branch misprediction—then the work done so far has to be undone.
  And that can slow down your code significantly.

In practice, many conditionals have very consistent answers for long stretches of time, in which case branch prediction will end up being very accurate, and your code will run faster.
The main performance issue, then, is when branches are unpredictable, as we'll see in an example the next chapter.

So how can we avoid branches?
We'll cover different strategies in the following chapters.
